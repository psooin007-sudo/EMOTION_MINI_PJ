<<<<<<< HEAD
# === Ïä§ÌÉÄÏùºÎßÅ (Í∏∞Î≥∏ Streamlit ÏÇ¨Ïù¥Ï¶à + ÏÇ¨Ïù¥ÎìúÎ∞î Ïà®ÍπÄ) ===
APP1_STYLE = """
<style>
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;600;700&display=swap');

/* ÏÇ¨Ïù¥ÎìúÎ∞î ÏôÑÏ†ÑÌûà Ïà®Í∏∞Í∏∞ */
[data-testid="stSidebar"],
[data-testid="stSidebarNav"],
[data-testid="stSidebarNavItems"], 
[data-testid="stSidebarNavSeparator"],
[data-testid="stSidebarUserContent"] {
    display: none !important;
}

/* Î©îÏù∏ ÏòÅÏó≠ÏùÑ Ï†ÑÏ≤¥ ÎÑàÎπÑÎ°ú ÌôïÏû• */
.main .block-container {
    padding-left: 1rem !important;
    padding-right: 1rem !important;
    max-width: 100% !important;
}

/* Ï†ÑÏ≤¥ Î∞∞Í≤Ω */
.stApp {
    background: #f8fafc;
    font-family: 'Noto Sans KR', system-ui, -apple-system, sans-serif;
}

html, body, [class*="css"] {
    color: #0f172a;
    font-weight: 400;
    line-height: 1.6;
}

/* Ï†úÎ™© */
.main-title {
    text-align: center;
    color: #020617;
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    letter-spacing: -0.025em;
}

.subtitle {
    text-align: center;
    color: #64748b;
    font-size: 1.125rem;
    margin-bottom: 3rem;
    font-weight: 400;
}

/* Î≤ÑÌäº Ïä§ÌÉÄÏùº */
.stButton > button {
    background: #ffffff;
    color: #334155;
    font-weight: 500;
    font-size: 0.95rem;
    padding: 1rem 1.5rem;
    border-radius: 0.75rem;
    border: 1px solid #e2e8f0;
    margin: 0.5rem 0;
    transition: all 0.2s ease-out;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    width: 100%;
    min-height: 3.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-family: inherit;
}

.stButton > button:hover {
    background: #f8fafc;
    border-color: #3b82f6;
    color: #1e40af;
    box-shadow: 0 4px 12px 0 rgba(59, 130, 246, 0.15);
    transform: translateY(-1px);
}

.stButton > button:active {
    transform: translateY(0);
}

/* Primary Î≤ÑÌäº */
.stButton > button[kind="primary"] {
    background: #3b82f6;
    color: white;
    border: 1px solid #3b82f6;
    font-weight: 600;
}

.stButton > button[kind="primary"]:hover {
    background: #2563eb;
    border-color: #2563eb;
    color: white;
    box-shadow: 0 8px 25px 0 rgba(59, 130, 246, 0.25);
}

/* Secondary Î≤ÑÌäº */
.stButton > button[kind="secondary"] {
    background: #f1f5f9;
    color: #475569;
    border: 1px solid #cbd5e1;
}

.stButton > button[kind="secondary"]:hover {
    background: #e2e8f0;
    border-color: #94a3b8;
}

/* ÌÖçÏä§Ìä∏ ÏòÅÏó≠ */
textarea {
    font-size: 0.95rem !important;
    padding: 1rem !important;
    border-radius: 0.75rem !important;
    border: 1px solid #d1d5db !important;
    background: #ffffff !important;
    transition: border-color 0.2s ease !important;
    line-height: 1.6 !important;
    resize: vertical !important;
    min-height: 8rem !important;
    font-family: inherit !important;
    color: #111827 !important;
}

textarea:focus {
    border-color: #3b82f6 !important;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
    outline: none !important;
}

textarea::placeholder {
    color: #9ca3af !important;
}

/* ÎùºÎîîÏò§ Î≤ÑÌäº */
.stRadio > div {
    display: grid !important;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)) !important;
    gap: 1rem !important;
    margin: 1.5rem 0 !important;
}

.stRadio input[type="radio"] {
    display: none !important;
}

.stRadio label {
    display: flex !important;
    flex-direction: column !important;
    align-items: center !important;
    justify-content: center !important;
    background: #ffffff !important;
    padding: 1.25rem !important;
    border-radius: 0.75rem !important;
    border: 1px solid #e5e7eb !important;
    transition: all 0.2s ease !important;
    cursor: pointer !important;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1) !important;
    color: #374151 !important;
    font-size: 0.875rem !important;
    font-weight: 500 !important;
    text-align: center !important;
    min-height: 5rem !important;
    gap: 0.5rem !important;
}

.stRadio label:hover {
    background: #f9fafb !important;
    border-color: #3b82f6 !important;
    box-shadow: 0 4px 12px 0 rgba(59, 130, 246, 0.1) !important;
}

.stRadio input[type="radio"]:checked + div label {
    background: #eff6ff !important;
    border-color: #3b82f6 !important;
    color: #1e40af !important;
    box-shadow: 0 4px 12px 0 rgba(59, 130, 246, 0.15) !important;
}

/* ÏÑπÏÖò Ïä§ÌÉÄÏùº */
.section {
    background: #ffffff;
    padding: 2rem;
    border-radius: 1rem;
    margin: 1.5rem 0;
    border: 1px solid #f1f5f9;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
}

.section-title {
    color: #0f172a;
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    text-align: center;
}

/* ÏÉÅÌÉú Î©îÏãúÏßÄ */
.element-container .stSuccess {
    background: #f0fdf4;
    border: 1px solid #bbf7d0;
    border-radius: 0.75rem;
    padding: 1rem;
}

.element-container .stInfo {
    background: #eff6ff;
    border: 1px solid #bfdbfe;
    border-radius: 0.75rem;
    padding: 1rem;
}

.element-container .stWarning {
    background: #fffbeb;
    border: 1px solid #fed7aa;
    border-radius: 0.75rem;
    padding: 1rem;
}

.element-container .stError {
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 0.75rem;
    padding: 1rem;
}

/* Progress bar */
.stProgress > div > div > div > div {
    background: #3b82f6;
    border-radius: 0.25rem;
}

/* Selectbox */
.stSelectbox > div > div > div {
    background: #ffffff;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
}

/* Checkbox */
.stCheckbox > label {
    background: #ffffff;
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    border: 1px solid #e5e7eb;
    transition: all 0.2s ease;
}

.stCheckbox > label:hover {
    background: #f9fafb;
    border-color: #3b82f6;
}

/* Î∞òÏùëÌòï */
@media (max-width: 768px) {
    .main-title { 
        font-size: 2rem; 
    }
    .stRadio > div { 
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)) !important;
    }
}

/* Ïä§ÌÅ¨Î°§Î∞î */
::-webkit-scrollbar {
    width: 6px;
}

::-webkit-scrollbar-track {
    background: #f1f5f9;
}

::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
}
</style>
"""# integrated_main.py
=======
# main_with_graphs_integrated.py
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
import streamlit as st
import subprocess
import sys
import os
<<<<<<< HEAD
=======
import threading
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
from datetime import datetime, timedelta
import json
import time
import base64
import gzip
<<<<<<< HEAD
import atexit
from transformers import pipeline

import streamlit as st
from ui_styles import apply_base_style, hide_sidebar

st.set_page_config(page_title="Î©îÏù∏", initial_sidebar_state="collapsed")
apply_base_style()
hide_sidebar()   # ‚Üê Ïù¥ Ìïú Ï§ÑÏù¥ ÌïµÏã¨



# Ïô∏Î∂Ä ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏûêÎèô ÏÑ§Ïπò
import plotly.graph_objects as go
=======
import numpy as np
import atexit

# web_no_key_rere.py
# Ïô∏Î∂Ä ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏûêÎèô ÏÑ§Ïπò

import plotly.graph_objects as go
import plotly.express as px
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
import pandas as pd
from plotly.subplots import make_subplots

from emotion_model import analyze_emotion_from_image, detect_face_and_analyze, get_latest_emotion, reset_emotion_state
import emotion_list

<<<<<<< HEAD
# === Ìïú Îü∞(run)ÏóêÏÑú Ï§ëÎ≥µ Î≤ÑÌäº Î†åÎçî Î∞©ÏßÄÏö© Í∞ÄÎìú ===
_STOP_BTN_DRAWN = False

# ÏºÄÏñ¥ÌéòÏù¥ÏßÄ Ïä§ÌÅ¨Î¶ΩÌä∏ Í≤ΩÎ°ú (ÌååÏùºÎ™ÖÏùÄ ÎÑ§Í∞Ä Ïã§Ï†úÎ°ú Ïã§ÌñâÌï† ÌååÏùºÎ™ÖÏúºÎ°ú)
CARE_PAGE_PATH = os.path.join(os.path.dirname(__file__), "app1.py")

# Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞ (ÌÜµÌï©Îêú Î≤ÑÏ†Ñ)
EMOTIONS = emotion_list.emotions

# app1.pyÏùò Í∞êÏ†ï ÏÑ§Ï†ïÏùÑ ÌÜµÌï©
EMOTION_CONFIG = {
    "Ïä¨Ìîî": {"emoji": "üò¢", "desc": "ÎßàÏùåÏù¥ ÏïÑÌîÑÍ≥† Ïö∞Ïö∏Ìï† Îïå"},
    "ÌôîÎÇ®": {"emoji": "üò°", "desc": "Î∂ÑÎÖ∏ÏôÄ ÏßúÏ¶ùÏù¥ ÎÇ† Îïå"}, 
    "Í∏∞ÏÅ®": {"emoji": "üòä", "desc": "ÌñâÎ≥µÌïòÍ≥† Ï¶êÍ±∞Ïö∏ Îïå"},
    "Í±±Ï†ï": {"emoji": "üò©", "desc": "Í±±Ï†ïÎèºÏÑú ÌûòÏù¥Îì§ Îïå"},
    "Î∂àÏïà/ÎëêÎ†§ÏõÄ": {"emoji": "üò∞", "desc": "Î∂àÏïàÌïòÍ≥† ÎëêÎ†§Ïö∏ Îïå"},
    "Ïä§Ìä∏Î†àÏä§": {"emoji": "üòµ", "desc": "ÏïïÎ∞ïÍ∞êÍ≥º ÌîºÎ°úÎ•º ÎäêÎÇÑ Îïå"},
    "Î≥µÏû°": {"emoji": "üòµ‚Äçüí´", "desc": "ÌòºÎûÄÏä§ÎüΩÍ≥† Î≥µÏû°Ìï† Îïå"},
    "Î™®Î•¥Í≤†Ïùå": {"emoji": "ü§î", "desc": "Í∞êÏ†ïÏù¥ Ïï†Îß§ÌïòÍ≥† Î™®Ìò∏Ìï† Îïå"}
}

EMOTION_TO_PAGE = {
    "ÌôîÎÇ®": "pages/anger_game.py",
    "Ïä¨Ìîî": "pages/music.py",
    "Í∏∞ÏÅ®": "pages/rr.py", 
    "Í±±Ï†ï": "pages/breathing.py",
    "Î∂àÏïà/ÎëêÎ†§ÏõÄ": "pages/anxiety_safety_check.py",
    "Ïä§Ìä∏Î†àÏä§": "pages/game.py",
    "Î≥µÏû°": "pages/proverb_quiz_streamlit2.py",
    "Î™®Î•¥Í≤†Ïùå": "pages/app_streamlit.py"
}

# === Ïä§ÌÉÄÏùºÎßÅ (app1.py Í∏∞Î∞ò) ===
APP1_STYLE = """
<style>
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;600;700&display=swap');

/* Ï†ÑÏ≤¥ Î∞∞Í≤Ω - Î∞ùÍ≥† ÍπîÎÅîÌïòÍ≤å */
.stApp {
    background: linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%);
    min-height: 100vh;
}

html, body, [class*="css"] {
    font-family: 'Noto Sans KR', sans-serif;
    color: #2c3e50;
}

/* Î©îÏù∏ Ïª®ÌÖåÏù¥ÎÑà */
.main-container {
    background: #ffffff;
    padding: 40px;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
    margin: 20px auto;
    max-width: 900px;
    border: 1px solid #e1e8f0;
}

/* Ï†úÎ™© */
.main-title {
    text-align: center;
    color: #2c3e50;
    font-size: 2.8em;
    font-weight: 700;
    margin-bottom: 10px;
}

.subtitle {
    text-align: center;
    color: #64748b;
    font-size: 1.1em;
    margin-bottom: 40px;
    font-weight: 400;
}

/* Î≤ÑÌäº Ïä§ÌÉÄÏùº - ÌÜµÏùºÎêú ÌÅ¨Í∏∞ */
.stButton > button {
    background: #ffffff;
    color: #2c3e50;
    font-weight: 600;
    font-size: 16px;
    padding: 20px 25px;
    border-radius: 12px;
    border: 2px solid #e1e8f0;
    margin: 10px 0;
    transition: all 0.2s ease;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    width: 100%;
    min-height: 65px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    line-height: 1.4;
}

.stButton > button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    background: #f8fafc;
    border-color: #4facfe;
}

/* ÌûêÎßÅÏÑºÌÑ∞ Î≤ÑÌäº */
.healing-btn {
    background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%) !important;
    color: #2c3e50 !important;
    border-color: #ff9a9e !important;
    font-weight: 700 !important;
    min-height: 70px !important;
    margin-top: 30px !important;
}

.healing-btn:hover {
    background: linear-gradient(135deg, #fecfef 0%, #ff9a9e 100%) !important;
    box-shadow: 0 10px 25px rgba(255, 154, 158, 0.3) !important;
}

/* ÌÖçÏä§Ìä∏ ÏòÅÏó≠ */
textarea {
    font-size: 15px !important;
    padding: 20px !important;
    border-radius: 12px !important;
    border: 2px solid #e1e8f0 !important;
    background: #ffffff !important;
    transition: all 0.2s ease !important;
    line-height: 1.5 !important;
    resize: none !important;
    min-height: 180px !important;
}

textarea:focus {
    border-color: #4facfe !important;
    box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1) !important;
    outline: none !important;
}

/* ÎùºÎîîÏò§ Î≤ÑÌäº - 4Ïó¥ 2Ìñâ Î∞∞Ïπò */
.stRadio > div {
    display: grid !important;
    grid-template-columns: repeat(4, 1fr) !important;
    grid-template-rows: repeat(2, 1fr) !important;
    gap: 15px !important;
    margin: 20px 0 !important;
    max-width: 800px !important;
    margin-left: auto !important;
    margin-right: auto !important;
}

.stRadio input[type="radio"] {
    display: none !important;
}

.stRadio label {
    display: flex !important;
    flex-direction: column !important;
    align-items: center !important;
    justify-content: center !important;
    background: #ffffff !important;
    padding: 20px 10px !important;
    border-radius: 12px !important;
    border: 2px solid #e1e8f0 !important;
    transition: all 0.2s ease !important;
    cursor: pointer !important;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05) !important;
    color: #2c3e50 !important;
    font-size: 14px !important;
    font-weight: 500 !important;
    text-align: center !important;
    min-height: 85px !important;
    gap: 5px !important;
}

.stRadio label:hover {
    background: #f8fafc !important;
    border-color: #4facfe !important;
    transform: translateY(-1px) !important;
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.08) !important;
}

.stRadio input[type="radio"]:checked + div label {
    background: linear-gradient(135deg, #4facfe 0%, #00d2ff 100%) !important;
    color: white !important;
    border-color: #4facfe !important;
    box-shadow: 0 8px 20px rgba(79, 172, 254, 0.2) !important;
}

/* ÏÑπÏÖò Ïä§ÌÉÄÏùº */
.section {
    background: #f8fafc;
    padding: 30px;
    border-radius: 15px;
    margin: 25px 0;
    border: 1px solid #e1e8f0;
}

.section-title {
    color: #2c3e50;
    font-size: 1.4em;
    font-weight: 600;
    margin-bottom: 20px;
    text-align: center;
}

/* ÏÉÅÌÉú Î©îÏãúÏßÄ */
.element-container .stSuccess {
    background: rgba(34, 197, 94, 0.08);
    border: 1px solid rgba(34, 197, 94, 0.2);
    border-radius: 12px;
}

.element-container .stInfo {
    background: rgba(59, 130, 246, 0.08);
    border: 1px solid rgba(59, 130, 246, 0.2);
    border-radius: 12px;
}

.element-container .stWarning {
    background: rgba(245, 158, 11, 0.08);
    border: 1px solid rgba(245, 158, 11, 0.2);
    border-radius: 12px;
}

/* Î∞òÏùëÌòï */
@media (max-width: 768px) {
    .main-title { font-size: 2.2em; }
    .main-container { margin: 15px; padding: 25px; }
    .stRadio > div { 
        grid-template-columns: repeat(2, 1fr) !important;
        grid-template-rows: repeat(4, 1fr) !important;
        max-width: 400px !important;
    }
}
</style>
"""

=======
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="Í∞êÏ†ï Î∂ÑÏÑù ÏãúÏä§ÌÖú",
    page_icon="üé≠",
<<<<<<< HEAD
    layout="centered",
    initial_sidebar_state="collapsed"
)

# Ïä§ÌÉÄÏùº Ï†ÅÏö©
st.markdown(APP1_STYLE, unsafe_allow_html=True)

# === ÏÑ∏ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî ===
=======
    layout="wide",
    initial_sidebar_state="expanded"
)

# ÏÑ∏ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'main'

if 'webcam_process' not in st.session_state:
    st.session_state.webcam_process = None

if 'emotion_history' not in st.session_state:
    st.session_state.emotion_history = []
<<<<<<< HEAD
    
if 'was_webcam_running' not in st.session_state:
    st.session_state.was_webcam_running = False

if 'page_mode' not in st.session_state:
    st.session_state.page_mode = 'main'

# === AI Î™®Îç∏ Î°úÎìú (app1.pyÏóêÏÑú Í∞ÄÏ†∏Ïò¥) ===
@st.cache_resource(show_spinner="AI Î™®Îç∏ Ï§ÄÎπÑ Ï§ë...")
def load_emotion_model():
    try:
        classifier = pipeline(
            "sentiment-analysis", 
            model="beomi/KcELECTRA-base-v2022",
            return_all_scores=True
        )
        return classifier
    except Exception as e:
        st.error(f"Î™®Îç∏ Î°úÎìú Ïã§Ìå®: {str(e)}")
        return None

# === Í∞êÏ†ï Î∂ÑÏÑù Ìï®Ïàò (app1.pyÏóêÏÑú Í∞ÄÏ†∏Ïò¥) ===
def analyze_emotion(text):
    classifier = load_emotion_model()
    if not classifier:
        return "Î≥µÏû°", 75.0
    
    try:
        emotion_keywords = {
            "ÌôîÎÇ®": ["Ìôî", "ÏßúÏ¶ù", "Î∂ÑÎÖ∏", "Ïó¥Î∞õ", "Îπ°Ïπò", "ÏñµÏö∏", "ÎãµÎãµ", "ÎØ∏ÏπòÍ≤†", "ÌôîÎÇò"],
            "Ïä¨Ìîî": ["Ïä¨ÌîÑ", "Ïö∞Ïö∏", "ÎààÎ¨º", "ÏÉÅÏ≤ò", "Ïô∏Î°ú", "ÌóàÏ†Ñ", "Î©òÌÉà", "ÏïÑÌåå", "ÏÑúÎü¨"],
            "Í∏∞ÏÅ®": ["Í∏∞ÏÅú", "ÌñâÎ≥µ", "Ï¢ã", "Ï¶êÍ±∞", "ÏõÉ", "Ïã†ÎÇò", "ÎßåÏ°±", "ÎøåÎìØ", "ÏµúÍ≥†"],
            "Ïä§Ìä∏Î†àÏä§": ["Ïä§Ìä∏Î†àÏä§", "ÌîºÍ≥§", "ÌûòÎì§", "ÏßÄÏ≥ê", "Î≤àÏïÑÏõÉ", "ÏïïÎ∞ï", "Î∂ÄÎã¥"],
            "Í±±Ï†ï": ["Í±±Ï†ï", "Í∏¥Ïû•"],
            "Î∂àÏïà/ÎëêÎ†§ÏõÄ": ["Î∂àÏïà", "ÎëêÎ†§", "Î¨¥ÏÑú", "Í≤ÅÎÇò", "Ï¥àÏ°∞"],
            "Î≥µÏû°": ["Î≥µÏû°", "ÌòºÎûÄ", "Í∞àÎì±", "Í≥†ÎØº", "Ïï†Îß§", "Ìó∑Í∞à", "Ïñ¥Î†µ"],
            "Î™®Î•¥Í≤†Ïùå": ["Î™®Î•¥", "Í∏ÄÏéÑ", "ÏûòÎ™®Î•¥", "ÌôïÏã§ÌïòÏßÄ", "Î≥ÑÎ°ú", "Í∑∏ÎÉ•", "Ïùå"]
        }
        
        text_lower = text.lower()
        scores = {}
        
        for emotion, keywords in emotion_keywords.items():
            score = sum(1 for keyword in keywords if keyword in text_lower)
            if score > 0:
                scores[emotion] = score
        
        if scores:
            emotion = max(scores, key=scores.get)
            confidence = min(65 + scores[emotion] * 10, 90)
        else:
            result = classifier(text)
            emotion = "Í∏∞ÏÅ®" if result[0]['label'] == 'POSITIVE' else "Î≥µÏû°"
            confidence = max(result[0]['score'] * 80, 70)
        
        return emotion, confidence
        
    except:
        return "Î≥µÏû°", 75.0

# === Ï†ïÎ¶¨ Ìï®ÏàòÎì§ (Í∏∞Ï°¥ main.pyÏóêÏÑú) ===
=======

# Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞ (ÌÜµÌï©Îêú Î≤ÑÏ†Ñ)
EMOTIONS = emotion_list.emotions

# === Ï†ïÎ¶¨ Ìï®ÏàòÎì§ ===

>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
def cleanup_processes():
    """Ïï± Ï¢ÖÎ£å Ïãú ÏõπÏ∫† ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ¶¨ Î∞è JSON ÌååÏùº ÏÇ≠Ï†ú"""
    # ÏõπÏ∫† ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å
    if 'webcam_process' in st.session_state and st.session_state.webcam_process:
        try:
            st.session_state.webcam_process.terminate()
            print("‚úÖ ÏõπÏ∫† ÌîÑÎ°úÏÑ∏Ïä§Í∞Ä Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.")
        except:
            pass
    
    # emotion_history.json ÌååÏùº ÏÇ≠Ï†ú
    try:
        if os.path.exists('emotion_history.json'):
            os.remove('emotion_history.json')
            print("‚úÖ emotion_history.json ÌååÏùºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.")
    except Exception as e:
        print(f"‚ùå JSON ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: {e}")
    
    # latest_emotion_result.json ÌååÏùº ÏÇ≠Ï†ú
    try:
        if os.path.exists('latest_emotion_result.json'):
            os.remove('latest_emotion_result.json')
            print("‚úÖ latest_emotion_result.json ÌååÏùºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.")
    except Exception as e:
        print(f"‚ùå latest_emotion_result.json ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: {e}")

<<<<<<< HEAD
=======

>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
def shutdown_app():
    """Ïï± ÏàòÎèô Ï¢ÖÎ£å Ìï®Ïàò"""
    st.success("üîÑ ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§...")
    cleanup_processes()
    st.info("‚úÖ Ï†ïÎ¶¨ ÏûëÏóÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Î∏åÎùºÏö∞Ï†Ä ÌÉ≠ÏùÑ Îã´ÏïÑÏ£ºÏÑ∏Ïöî.")
    st.stop()

# ÏûêÎèô Ï†ïÎ¶¨ Îì±Î°ù
atexit.register(cleanup_processes)

<<<<<<< HEAD
# === ÏõπÏ∫† ÌîÑÎ°úÏÑ∏Ïä§ Í¥ÄÎ¶¨ Ìï®ÏàòÎì§ (Í∏∞Ï°¥ main.pyÏóêÏÑú) ===
=======
# === Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§ ===

def safe_get_query_param(param_name, default_value):
    """ÏïàÏ†ÑÌïú ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÏ∂ú"""
    try:
        if hasattr(st, 'query_params'):
            if param_name in st.query_params:
                return st.query_params[param_name]
        elif hasattr(st, 'experimental_get_query_params'):
            params = st.experimental_get_query_params()
            if param_name in params:
                return params[param_name][0]
        return default_value
    except Exception as e:
        st.error(f"ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ ÏùΩÍ∏∞ Ïò§Î•ò: {e}")
        return default_value

def load_url_history_data():
    """URLÏóêÏÑú ÏïïÏ∂ïÎêú ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Î≥µÏõê"""
    try:
        hist_param = safe_get_query_param('hist', None)
        if not hist_param:
            return []
        
        print(f"üìä URLÏóêÏÑú ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ï§ë... (Í∏∏Ïù¥: {len(hist_param)})")
        
        # base64 ÎîîÏΩîÎî© ‚Üí gzip ÏïïÏ∂ï Ìï¥Ï†ú ‚Üí JSON ÌååÏã±
        compressed_data = base64.b64decode(hist_param.encode('utf-8'))
        json_str = gzip.decompress(compressed_data).decode('utf-8')
        compact_data = json.loads(json_str)
        
        # ÏïïÏ∂ïÎêú ÌòïÏãùÏùÑ ÏõêÎûò ÌòïÏãùÏúºÎ°ú Î≥µÏõê
        restored_history = []
        for item in compact_data:
            try:
                timestamp = datetime.fromtimestamp(item['t'])
                restored_history.append({
                    'emotion': item['e'],
                    'score': float(item['s']),
                    'timestamp': timestamp,
                    'datetime': timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                    'raw_emotion': item['e']
                })
            except (KeyError, ValueError, OSError) as e:
                print(f"‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ï§ë Ïò§Î•ò: {e}")
                continue
        
        print(f"‚úÖ {len(restored_history)}Í∞ú ÌûàÏä§ÌÜ†Î¶¨ Î≥µÏõê ÏôÑÎ£å")
        return restored_history
        
    except Exception as e:
        print(f"‚ùå URL ÌûàÏä§ÌÜ†Î¶¨ Î≥µÏõê Ïã§Ìå®: {e}")
        return []

def load_local_emotion_history():
    """Î°úÏª¨ Í∞êÏ†ï ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú (ÌååÏùºÏóêÏÑú)"""
    try:
        if os.path.exists('emotion_history.json'):
            with open('emotion_history.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                # timestamp Î¨∏ÏûêÏó¥ÏùÑ datetime Í∞ùÏ≤¥Î°ú Î≥ÄÌôò
                for item in data:
                    if isinstance(item.get('timestamp'), (int, float)):
                        item['timestamp'] = datetime.fromtimestamp(item['timestamp'])
                    elif isinstance(item.get('timestamp'), str):
                        try:
                            item['timestamp'] = datetime.fromisoformat(item['timestamp'])
                        except:
                            item['timestamp'] = datetime.strptime(item['timestamp'], '%Y-%m-%d %H:%M:%S')
                return data
    except Exception as e:
        print(f"Î°úÏª¨ ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú Ïã§Ìå®: {e}")
    return []

def load_all_emotion_data():
    """Î™®Îì† ÏÜåÏä§ÏóêÏÑú Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞ Î°úÎìú"""
    all_history = []
    
    # 1. URLÏóêÏÑú ÏïïÏ∂ïÎêú ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    url_history = load_url_history_data()
    if url_history:
        all_history.extend(url_history)
    
    # 2. Î°úÏª¨ ÌååÏùºÏóêÏÑú Î°úÎìú
    local_history = load_local_emotion_history()
    if local_history:
        all_history.extend(local_history)
    
    # 3. ÏÑ∏ÏÖò ÏÉÅÌÉúÏóêÏÑú Î°úÎìú
    session_history = st.session_state.get('emotion_history', [])
    if session_history:
        all_history.extend(session_history)
    
    # 4. Ï§ëÎ≥µ Ï†úÍ±∞ (ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Í∏∞Ï§Ä)
    seen_timestamps = set()
    unique_history = []
    
    for entry in sorted(all_history, key=lambda x: x['timestamp']):
        timestamp_key = entry['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
        if timestamp_key not in seen_timestamps:
            seen_timestamps.add(timestamp_key)
            unique_history.append(entry)
    
    return unique_history

# === ÏõπÏ∫† ÌîÑÎ°úÏÑ∏Ïä§ Í¥ÄÎ¶¨ Ìï®ÏàòÎì§ ===

>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
def start_webcam_process():
    """web.pyÎ•º Î≥ÑÎèÑ ÌîÑÎ°úÏÑ∏Ïä§Î°ú Ïã§Ìñâ"""
    try:
        python_exe = sys.executable
        web_py_path = os.path.join(os.path.dirname(__file__), 'webcam.py')
        
        process = subprocess.Popen([python_exe, web_py_path])
        return process
    except Exception as e:
        st.error(f"ÏõπÏ∫† ÌîÑÎ°úÏÑ∏Ïä§ ÏãúÏûë Ïã§Ìå®: {e}")
        return None

def stop_webcam_process():
    """ÏõπÏ∫† ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å"""
    if st.session_state.webcam_process:
        try:
            st.session_state.webcam_process.terminate()
            st.session_state.webcam_process.wait(timeout=3)
            st.session_state.webcam_process = None
            return True
        except:
            try:
                st.session_state.webcam_process.kill()
                st.session_state.webcam_process = None
                return True
            except:
                return False
    return True

def is_webcam_running():
    """ÏõπÏ∫† ÌîÑÎ°úÏÑ∏Ïä§Í∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏"""
    if st.session_state.webcam_process:
        return st.session_state.webcam_process.poll() is None
    return False

<<<<<<< HEAD
# === Ï∞®Ìä∏ ÏÉùÏÑ± Ìï®ÏàòÎì§ (ÏõπÏ∫† Î∂ÑÏÑù Í≤∞Í≥ºÏö©) ===
=======
# === Ï∞®Ìä∏ ÏÉùÏÑ± Ìï®ÏàòÎì§ ===

>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
def create_emotion_gauge(score, color):
    """Í∞êÏ†ï Ïã†Î¢∞ÎèÑ Í≤åÏù¥ÏßÄ Ï∞®Ìä∏"""
    fig = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=score * 100,
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': "Ïã†Î¢∞ÎèÑ (%)"},
        delta={'reference': 80},
        gauge={
            'axis': {'range': [None, 100]},
            'bar': {'color': color},
            'steps': [
                {'range': [0, 50], 'color': "lightgray"},
                {'range': [50, 80], 'color': "gray"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75, 
                'value': 90
            }
        }
    ))
    fig.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=20))
    return fig

def create_enhanced_timeline_chart(history_data, minutes=30):
    """Ìñ•ÏÉÅÎêú Í∞êÏ†ï Î≥ÄÌôî Ï∂îÏù¥ Ï∞®Ìä∏"""
    if not history_data:
        return None
        
    # ÏµúÍ∑º NÎ∂ÑÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÌïÑÌÑ∞ÎßÅ
    cutoff_time = datetime.now() - timedelta(minutes=minutes)
    recent_data = [h for h in history_data if h['timestamp'] > cutoff_time]
    
    if len(recent_data) < 1:
        return None
    
    # Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
    df = pd.DataFrame([
        {
            'time': entry['timestamp'].strftime('%H:%M:%S'),
            'timestamp': entry['timestamp'],
            'emotion': EMOTIONS.get(entry['emotion'], {'korean': entry['emotion']})['korean'],
            'emotion_en': entry['emotion'],
            'score': entry['score'] * 100,
            'color': EMOTIONS.get(entry['emotion'], {'color': '#808080'})['color'],
            'emoji': EMOTIONS.get(entry['emotion'], {'emoji': 'ü§î'})['emoji']
        }
        for entry in recent_data
    ])
    
    # ÎùºÏù∏ Ï∞®Ìä∏ ÏÉùÏÑ±
    fig = go.Figure()
    
    # Ï†ÑÏ≤¥ Í∞êÏ†ï Î≥ÄÌôî ÎùºÏù∏
    fig.add_trace(go.Scatter(
        x=df['timestamp'],
        y=df['score'],
        mode='lines+markers',
        name='Í∞êÏ†ï Î≥ÄÌôî',
        line=dict(color='#1f77b4', width=3),
        marker=dict(size=8),
        hovertemplate="<b>%{text}</b><br>" +
                     "ÏãúÍ∞Ñ: %{x|%H:%M:%S}<br>" +
                     "Ïã†Î¢∞ÎèÑ: %{y:.1f}%<extra></extra>",
        text=[f"{row['emoji']} {row['emotion']}" for _, row in df.iterrows()]
    ))
    
    # Í∞êÏ†ïÎ≥ÑÎ°ú ÏÉâÏÉÅÏù¥ Îã§Î•∏ Ï†êÎì§ Ï∂îÍ∞Ä
    for emotion in df['emotion_en'].unique():
        emotion_data = df[df['emotion_en'] == emotion]
        if not emotion_data.empty:
            emotion_info = EMOTIONS.get(emotion, {'korean': emotion, 'color': '#808080', 'emoji': 'ü§î'})
            fig.add_trace(go.Scatter(
                x=emotion_data['timestamp'],
                y=emotion_data['score'],
                mode='markers',
                marker=dict(
                    size=15,
                    color=emotion_info['color'],
                    symbol='circle',
                    line=dict(width=2, color='white')
                ),
                name=f"{emotion_info['emoji']} {emotion_info['korean']}",
                hovertemplate=f"<b>{emotion_info['emoji']} {emotion_info['korean']}</b><br>" +
                             "ÏãúÍ∞Ñ: %{x|%H:%M:%S}<br>" +
                             "Ïã†Î¢∞ÎèÑ: %{y:.1f}%<extra></extra>",
                showlegend=True
            ))
    
    fig.update_layout(
<<<<<<< HEAD
        title=f"Í∞êÏ†ï Î≥ÄÌôî Ï∂îÏù¥ (ÏµúÍ∑º {minutes}Î∂Ñ)",
=======
        title=f"Í∞êÏ†ï Î≥ÄÌôî Ï∂îÏù¥)",
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
        xaxis_title="ÏãúÍ∞Ñ",
        yaxis_title="Ïã†Î¢∞ÎèÑ (%)",
        height=500,
        margin=dict(l=20, r=20, t=60, b=20),
        hovermode='x unified',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        yaxis=dict(range=[0, 100])
    )
    
    return fig

def create_emotion_distribution_chart(history_data, minutes=30):
    """Í∞êÏ†ï Î∂ÑÌè¨ ÌååÏù¥ Ï∞®Ìä∏"""
    if not history_data:
        return None
        
    cutoff_time = datetime.now() - timedelta(minutes=minutes)
    recent_data = [h for h in history_data if h['timestamp'] > cutoff_time]
    
    if not recent_data:
        return None
    
    # Í∞êÏ†ïÎ≥Ñ Ïπ¥Ïö¥Ìä∏
    emotion_counts = {}
    for entry in recent_data:
        emotion = entry['emotion']
        emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
    
    # Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
    emotions = list(emotion_counts.keys())
    counts = list(emotion_counts.values())
    colors = [EMOTIONS.get(e, {'color': '#808080'})['color'] for e in emotions]
    labels = [f"{EMOTIONS.get(e, {'emoji': 'ü§î', 'korean': e})['emoji']} {EMOTIONS.get(e, {'korean': e})['korean']}" for e in emotions]
    
    fig = go.Figure(data=[go.Pie(
        labels=labels,
        values=counts,
        marker_colors=colors,
        textinfo='label+percent',
        textposition='auto',
        hovertemplate="<b>%{label}</b><br>" +
                     "ÌöüÏàò: %{value}<br>" +
                     "ÎπÑÏú®: %{percent}<extra></extra>"
    )])
    
    fig.update_layout(
<<<<<<< HEAD
        title=f"Í∞êÏ†ï Î∂ÑÌè¨ (ÏµúÍ∑º {minutes}Î∂Ñ)",
=======
        title=f"Í∞êÏ†ï Î∂ÑÌè¨)",
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
        height=400,
        margin=dict(l=20, r=20, t=60, b=20)
    )
    
    return fig

<<<<<<< HEAD
=======

>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
def create_emotion_stats_table(history_data, minutes=30):
    """Í∞êÏ†ï ÌÜµÍ≥Ñ ÌÖåÏù¥Î∏î"""
    if not history_data:
        return None
        
    cutoff_time = datetime.now() - timedelta(minutes=minutes)
    recent_data = [h for h in history_data if h['timestamp'] > cutoff_time]
    
    if not recent_data:
        return None
    
    # ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
    emotion_stats = {}
    for entry in recent_data:
        emotion = entry['emotion']
        score = entry['score']
        
        if emotion not in emotion_stats:
            emotion_stats[emotion] = {
                'count': 0,
                'scores': [],
                'total_score': 0
            }
        
        emotion_stats[emotion]['count'] += 1
        emotion_stats[emotion]['scores'].append(score)
        emotion_stats[emotion]['total_score'] += score
    
    # ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    table_data = []
    for emotion, stats in emotion_stats.items():
        emotion_info = EMOTIONS.get(emotion, {'emoji': 'ü§î', 'korean': emotion})
        avg_score = stats['total_score'] / stats['count'] if stats['count'] > 0 else 0
        max_score = max(stats['scores']) if stats['scores'] else 0
        min_score = min(stats['scores']) if stats['scores'] else 0
        
        table_data.append({
            'Í∞êÏ†ï': f"{emotion_info['emoji']} {emotion_info['korean']}",
            'ÌöüÏàò': stats['count'],
            'ÌèâÍ∑† Ïã†Î¢∞ÎèÑ': f"{avg_score*100:.1f}%",
            'ÏµúÍ≥† Ïã†Î¢∞ÎèÑ': f"{max_score*100:.1f}%",
            'ÏµúÏ†Ä Ïã†Î¢∞ÎèÑ': f"{min_score*100:.1f}%"
        })
    
    # ÌöüÏàòÏàúÏúºÎ°ú Ï†ïÎ†¨
    table_data.sort(key=lambda x: x['ÌöüÏàò'], reverse=True)
    
    df = pd.DataFrame(table_data)
    return df

<<<<<<< HEAD
# === Î©îÏù∏ ÌéòÏù¥ÏßÄ Ìï®Ïàò ===
def show_main_page():
    """Î©îÏù∏ ÏÑ†ÌÉù ÌéòÏù¥ÏßÄ"""
    st.markdown('<h1 class="main-title">üê¨ ÎÇòÏùò Í∞êÏ†ï Ìï≠Ìï¥ÏùºÏßÄ</h1>', unsafe_allow_html=True)
    st.markdown('<p class="subtitle">ÌïòÎ£®ÌïòÎ£®Î•º "Í∞êÏ†ïÏùò Î∞îÎã§"Î•º Ìï≠Ìï¥ÌïòÎäî Ïó¨Ï†ïÏùÑ Îñ†ÎÇòÍ≥† ÏûàÎäî<br>ÎãπÏã†Ïù¥ Í∏∏ÏùÑ ÏûÉÏßÄ ÏïäÎèÑÎ°ù ÎèïÎäî "ÎÇòÏπ®Î∞ò"Ïù¥Ïûê "Îì±ÎåÄ"Í∞Ä ÎêòÏñ¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.</p>', unsafe_allow_html=True)
    st.markdown("---")
    
    # ÏÑ†ÌÉù Î≤ÑÌäºÎì§ÏùÑ ÏÑ∏ Í∞úÏùò Ïª¨ÎüºÏúºÎ°ú Î∞∞Ïπò
    col1 = st.columns(1)[0]

    with col1:
        st.markdown("#### ‚õµ Ïó¨Ï†ïÏùÑ Îñ†ÎÇòÍ∏∞ Ï†Ñ, ÎãπÏã†Ïùò Í∞êÏ†ïÏùÑ Ï≤¥ÌÅ¨Ìï¥ Î≥¥Í≤†ÏäµÎãàÎã§.")
        st.write("ÏõπÏ∫†ÏùÑ ÌÜµÌï¥ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í∞êÏ†ïÏùÑ Î∂ÑÏÑùÌï©ÎãàÎã§. ÎÑàÎ¨¥ Î∂ÄÎã¥Í∞ñÏßÄ ÏïäÏúºÏÖîÎèÑ Îê©ÎãàÎã§.")
        
        if st.button("üé• ÏõπÏ∫†ÏúºÎ°ú Î∂ÑÏÑùÌïòÍ∏∞", use_container_width=True):
            st.session_state.start_webcam_requested = True
            st.session_state.current_page = 'webcam'
            st.rerun()

def show_webcam_page():
    """ÏõπÏ∫† Ï†ÑÏö© ÌéòÏù¥ÏßÄ"""
    st.title("üîπ Ïã§ÏãúÍ∞Ñ ÏõπÏ∫† Î∂ÑÏÑù (Ï†ÑÏö© ÌéòÏù¥ÏßÄ)")
    st.markdown("---")

    # Îí§Î°úÍ∞ÄÍ∏∞
    cols = st.columns([1,1,1])
    with cols[0]:
        if st.button("üîô Î©îÏù∏ÏúºÎ°ú", use_container_width=True, key="web_nav_main"):
            st.session_state.current_page = 'main'
            st.rerun()

def show_webcam_page():
    """ÏõπÏ∫† Ï†ÑÏö© ÌéòÏù¥ÏßÄ"""
    st.title("üé• Ïã§ÏãúÍ∞Ñ ÏõπÏ∫† Í∞êÏ†ï Î∂ÑÏÑù")
    st.markdown("---")

    # Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
    col1 = st.columns(1)[0]
    with col1:
        if st.button("üîô Î©îÏù∏ÏúºÎ°ú", use_container_width=True):
            st.session_state.current_page = 'main'
            st.rerun()

    # ÏõπÏ∫† ÏÉÅÌÉú ÌôïÏù∏ Î∞è ÏãúÏûë
    webcam_running = is_webcam_running()
    
    if not webcam_running:
        if st.session_state.get("start_webcam_requested", False):
            st.info("ÏõπÏ∫†ÏùÑ ÏãúÏûëÌïòÍ≥† ÏûàÏäµÎãàÎã§...")
            st.session_state.webcam_process = start_webcam_process()
            st.session_state.start_webcam_requested = False
            if is_webcam_running():
                st.success("ÏõπÏ∫†Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!")
                st.rerun()
            else:
                st.error("ÏõπÏ∫† ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
        else:
            st.warning("ÏõπÏ∫†Ïù¥ Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            if st.button("üé• ÏõπÏ∫† ÏãúÏûëÌïòÍ∏∞", type="primary", use_container_width=True):
                st.session_state.webcam_process = start_webcam_process()
                if is_webcam_running():
                    st.success("ÏõπÏ∫†Ïù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!")
                    st.rerun()
                else:
                    st.error("ÏõπÏ∫† ÏãúÏûë Ïã§Ìå®")
    else:
        st.success("üü¢ ÏõπÏ∫†Ïù¥ Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§!")
        
        st.markdown("---")
        st.subheader("üß≠ ÏïàÎÇ¥ / ÏÉÅÌÉú")
        st.info(
            "‚Ä¢ Ïù¥ ÌéòÏù¥ÏßÄÎäî ÏõπÏ∫† Ïã§Ìñâ Ï†ÑÏö©ÏûÖÎãàÎã§.\n"
            "‚Ä¢ ÌëúÏ†ïÏùÑ ÏßÄÏñ¥Î≥¥ÏÑ∏Ïöî. Î∂ÑÏÑù Í≤∞Í≥ºÎäî Í∏∞Î°ùÏúºÎ°ú Ï†ÄÏû•ÎêòÍ≥†, ÏõπÏ∫† Ï¢ÖÎ£å Ïãú ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî.\n"
            "‚Ä¢ ÏïÑÎûò 'ÏõπÏ∫† Ï¢ÖÎ£å' Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥ ÏûêÎèôÏúºÎ°ú ÎåÄÏãúÎ≥¥ÎìúÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§."
        )
        
        # ÏõπÏ∫† Ï¢ÖÎ£å Î≤ÑÌäº
        if st.button("üõë ÏõπÏ∫† Ï¢ÖÎ£åÌïòÍ∏∞", use_container_width=True, type="secondary"):
            if stop_webcam_process():
                st.success("ÏõπÏ∫†Ïù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.")
                time.sleep(1)
                st.success("ÎÇòÏùò Í∞êÏ†ï Ìï≠Ìï¥ÏùºÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§!")
                progress_bar = st.progress(0)
                for i in range(100):
                    time.sleep(0.02)
                    progress_bar.progress(i + 1)
                st.switch_page("pages\healing_center.py")
            else:
                st.error("ÏõπÏ∫† Ï¢ÖÎ£å Ïã§Ìå®")
    
    # ÏûêÎèôÏúºÎ°ú ÏõπÏ∫†Ïù¥ Ï¢ÖÎ£åÎêú Í≤ΩÏö∞ Í∞êÏßÄ
    if not is_webcam_running() and st.session_state.get("was_webcam_running", False):
        st.info("ÏõπÏ∫†Ïù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§. ÎåÄÏãúÎ≥¥ÎìúÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§...")
        st.session_state.current_page = 'analytics'
        st.rerun()
    
    # ÏõπÏ∫† ÏÉÅÌÉúÎ•º ÏÑ∏ÏÖòÏóê Í∏∞Î°ù
    st.session_state.was_webcam_running = is_webcam_running()
    
    # 10Ï¥àÎßàÎã§ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
    time.sleep(10)
    st.rerun()

# === Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§ (Í∏∞Ï°¥ main.pyÏóêÏÑú ÌïÑÏöîÌïú Í≤ÉÎì§) ===
def safe_get_query_param(param_name, default_value):
    """ÏïàÏ†ÑÌïú ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÏ∂ú"""
    try:
        if hasattr(st, 'query_params'):
            if param_name in st.query_params:
                return st.query_params[param_name]
        elif hasattr(st, 'experimental_get_query_params'):
            params = st.experimental_get_query_params()
            if param_name in params:
                return params[param_name][0]
        return default_value
    except Exception as e:
        st.error(f"ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ ÏùΩÍ∏∞ Ïò§Î•ò: {e}")
        return default_value

def load_url_history_data():
    """URLÏóêÏÑú ÏïïÏ∂ïÎêú ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Î≥µÏõê"""
    try:
        hist_param = safe_get_query_param('hist', None)
        if not hist_param:
            return []
        
        print(f"üìä URLÏóêÏÑú ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ï§ë... (Í∏∏Ïù¥: {len(hist_param)})")
        
        # base64 ÎîîÏΩîÎî© ‚Üí gzip ÏïïÏ∂ï Ìï¥Ï†ú ‚Üí JSON ÌååÏã±
        compressed_data = base64.b64decode(hist_param.encode('utf-8'))
        json_str = gzip.decompress(compressed_data).decode('utf-8')
        compact_data = json.loads(json_str)
        
        # ÏïïÏ∂ïÎêú ÌòïÏãùÏùÑ ÏõêÎûò ÌòïÏãùÏúºÎ°ú Î≥µÏõê
        restored_history = []
        for item in compact_data:
            try:
                timestamp = datetime.fromtimestamp(item['t'])
                restored_history.append({
                    'emotion': item['e'],
                    'score': float(item['s']),
                    'timestamp': timestamp,
                    'datetime': timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                    'raw_emotion': item['e']
                })
            except (KeyError, ValueError, OSError) as e:
                print(f"‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ï§ë Ïò§Î•ò: {e}")
                continue
        
        print(f"‚úÖ {len(restored_history)}Í∞ú ÌûàÏä§ÌÜ†Î¶¨ Î≥µÏõê ÏôÑÎ£å")
        return restored_history
        
    except Exception as e:
        print(f"‚ùå URL ÌûàÏä§ÌÜ†Î¶¨ Î≥µÏõê Ïã§Ìå®: {e}")
        return []
    

def load_local_emotion_history():
    """Î°úÏª¨ Í∞êÏ†ï ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú (ÌååÏùºÏóêÏÑú)"""
    try:
        if os.path.exists('emotion_history.json'):
            with open('emotion_history.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                # timestamp Î¨∏ÏûêÏó¥ÏùÑ datetime Í∞ùÏ≤¥Î°ú Î≥ÄÌôò
                for item in data:
                    if isinstance(item.get('timestamp'), (int, float)):
                        item['timestamp'] = datetime.fromtimestamp(item['timestamp'])
                    elif isinstance(item.get('timestamp'), str):
                        try:
                            item['timestamp'] = datetime.fromisoformat(item['timestamp'])
                        except:
                            item['timestamp'] = datetime.strptime(item['timestamp'], '%Y-%m-%d %H:%M:%S')
                return data
    except Exception as e:
        print(f"Î°úÏª¨ ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú Ïã§Ìå®: {e}")
    return []

def load_all_emotion_data():
    """Î™®Îì† ÏÜåÏä§ÏóêÏÑú Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞ Î°úÎìú"""
    all_history = []
    
    # 1. URLÏóêÏÑú ÏïïÏ∂ïÎêú ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    url_history = load_url_history_data()
    if url_history:
        all_history.extend(url_history)
    
    # 2. Î°úÏª¨ ÌååÏùºÏóêÏÑú Î°úÎìú
    local_history = load_local_emotion_history()
    if local_history:
        all_history.extend(local_history)
    
    # 3. ÏÑ∏ÏÖò ÏÉÅÌÉúÏóêÏÑú Î°úÎìú
    session_history = st.session_state.get('emotion_history', [])
    if session_history:
        all_history.extend(session_history)
    
    # 4. Ï§ëÎ≥µ Ï†úÍ±∞ (ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Í∏∞Ï§Ä)
    seen_timestamps = set()
    unique_history = []
    
    for entry in sorted(all_history, key=lambda x: x['timestamp']):
        timestamp_key = entry['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
        if timestamp_key not in seen_timestamps:
            seen_timestamps.add(timestamp_key)
            unique_history.append(entry)
    
    return unique_history

def show_analytics_page():
    """Í≥†Í∏â Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú ÌéòÏù¥ÏßÄ - ÏõπÏ∫† Í≤∞Í≥º Ìè¨Ìï®"""
=======
# === ÌéòÏù¥ÏßÄ Ìï®ÏàòÎì§ ===

def show_main_page():
    """Î©îÏù∏ ÏÑ†ÌÉù ÌéòÏù¥ÏßÄ"""
    st.title("üòä Í∞êÏ†ï Î∂ÑÏÑù ÏãúÏä§ÌÖú")
    st.markdown("---")
    
    # Î°úÏª¨ ÌûàÏä§ÌÜ†Î¶¨ ÎØ∏Î¶¨Î≥¥Í∏∞
    local_history = load_local_emotion_history()
    if local_history:
        st.sidebar.success(f"üìä Î°úÏª¨ Îç∞Ïù¥ÌÑ∞: {len(local_history)}Í∞ú Í∏∞Î°ù")
        
        # ÏµúÍ∑º Í∞êÏ†ï ÎØ∏Î¶¨Î≥¥Í∏∞ (ÏÇ¨Ïù¥ÎìúÎ∞î)
        if len(local_history) > 0:
            st.sidebar.subheader("üìà ÏµúÍ∑º Í∞êÏ†ï")
            recent = local_history[-3:]  # ÏµúÍ∑º 3Í∞ú
            for i, emotion_data in enumerate(reversed(recent)):
                emotion_info = EMOTIONS.get(emotion_data['emotion'], {
                    'emoji': 'ü§î', 'korean': emotion_data['emotion']
                })
                st.sidebar.write(f"{emotion_info['emoji']} {emotion_info['korean']} ({emotion_data['score']*100:.1f}%)")
    
    # ÏÑ§Î™Ö
    st.markdown("""
    ### üé≠ Ïñ¥Îñ§ Î∞©Î≤ïÏúºÎ°ú Í∞êÏ†ïÏùÑ Î∂ÑÏÑùÌïòÍ≥† Ïã∂ÏúºÏÑ∏Ïöî?
    
    ÏÑ∏ Í∞ÄÏßÄ Î∞©Î≤ï Ï§ë ÌïòÎÇòÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî:
    """)
    
    # ÏÑ†ÌÉù Î≤ÑÌäºÎì§ÏùÑ ÏÑ∏ Í∞úÏùò Ïª¨ÎüºÏúºÎ°ú Î∞∞Ïπò
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìπ Ïã§ÏãúÍ∞Ñ ÏõπÏ∫† Î∂ÑÏÑù")
        st.write("ÏõπÏ∫†ÏùÑ ÌÜµÌï¥ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í∞êÏ†ïÏùÑ Î∂ÑÏÑùÌï©ÎãàÎã§")
        
        if is_webcam_running():
            if st.button("üîÑ ÏõπÏ∫† Ï∞Ω Îã§Ïãú Ïó¥Í∏∞", use_container_width=True):
                stop_webcam_process()
                st.session_state.webcam_process = start_webcam_process()
                if st.session_state.webcam_process:
                    st.success("‚úÖ ÏõπÏ∫†Ïù¥ Ïã§ÌñâÎêòÍ≥† ÏûàÏäµÎãàÎã§!")
        else:
            if st.button("üé• ÏõπÏ∫†ÏúºÎ°ú Î∂ÑÏÑùÌïòÍ∏∞", use_container_width=True):
                st.session_state.webcam_process = start_webcam_process()
                if st.session_state.webcam_process:
                    st.success("‚úÖ ÏõπÏ∫†Ïù¥ Ïã§ÌñâÎêòÍ≥† ÏûàÏäµÎãàÎã§!")
                    st.info("üí° ÏõπÏ∫† Ï∞ΩÏù¥ ÏºúÏßÑ ÏÉÅÌÉúÏóêÏÑú ÌëúÏ†ïÏùÑ ÏßÄÏñ¥Ï£ºÏÑ∏Ïöî.\n\nüõë ÏõπÏ∫†ÏùÑ Ï¢ÖÎ£åÌïòÎ©¥ Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä Ï†úÍ≥µÎê©ÎãàÎã§.")
    
    with col2:
        st.markdown("#### ‚úã ÏàòÎèôÏúºÎ°ú Í∞êÏ†ï ÏÑ†ÌÉù")
        st.write("ÏßÅÏ†ë Í∞êÏ†ïÏùÑ ÏÑ†ÌÉùÌï¥ÏÑú Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï©ÎãàÎã§")
        if st.button("üéØ ÏßÅÏ†ë ÏÑ†ÌÉùÌïòÍ∏∞", use_container_width=True):
            st.session_state.current_page = 'manual'
            st.rerun()
    
    # ÏõπÏ∫† Ï†úÏñ¥ Î≤ÑÌäºÎì§ (ÏõπÏ∫†Ïù¥ Ïã§Ìñâ Ï§ëÏùº ÎïåÎßå ÌëúÏãú)
    if is_webcam_running():
        st.markdown("---")
        st.markdown("#### üéÆ ÏõπÏ∫† Ï†úÏñ¥")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üõë ÏõπÏ∫† Ï¢ÖÎ£å", use_container_width=True):
                if stop_webcam_process():
                    st.success("‚úÖ ÏõπÏ∫†Ïù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.")
                    # ÏõπÏ∫† Ï¢ÖÎ£å Ïãú ÏûêÎèôÏúºÎ°ú ÎåÄÏãúÎ≥¥ÎìúÎ°ú Ïù¥Îèô
                    st.session_state.current_page = 'analytics'
                    st.rerun()
                
        with col2:
            if st.button("üîÑ ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®", use_container_width=True):
                st.rerun()
        
        with col3:
            st.info("üéØ **ÏõπÏ∫† ÏÇ¨Ïö© ÏïàÎÇ¥**\n\n"
                    "‚Ä¢ ÏñºÍµ¥ÏùÑ Ïπ¥Î©îÎùº Ï†ïÎ©¥Ïóê ÏúÑÏπòÏãúÌÇ§ÏÑ∏Ïöî\n"
                    "‚Ä¢ Îã§ÏñëÌïú ÌëúÏ†ïÏùÑ ÏßÄÏñ¥ Í∞êÏ†ï Ïù∏Ïãù Ï†ïÌôïÎèÑÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî\n"
                    "‚Ä¢ ÏÑ∏ÏÖò Ï¢ÖÎ£å Ïãú Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÌôîÎ©¥Ïóê ÌëúÏãúÎê©ÎãàÎã§\n")
        
    
        
def show_manual_page():
    """ÏàòÎèô ÏÑ†ÌÉù ÌéòÏù¥ÏßÄ"""
    st.title("‚úã Í∞êÏ†ïÏùÑ ÏßÅÏ†ë ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî")
    st.markdown("---")
    
    # Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
    if st.button("üîô Î©îÏù∏ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞"):
        st.session_state.current_page = 'main'
        st.rerun()
    
    st.markdown("### üé≠ Ïñ¥Îñ§ Í∞êÏ†ïÏùÑ ÏÑ†ÌÉùÌïòÏãúÍ≤†Ïñ¥Ïöî?")
    
    # Í∞êÏ†ï ÏÑ†ÌÉù Î≤ÑÌäºÎì§ÏùÑ 3x2 Í∑∏Î¶¨ÎìúÎ°ú Î∞∞Ïπò
    cols = st.columns(3)
    
    for i, (emotion_key, emotion_data) in enumerate(EMOTIONS.items()):
        col = cols[i % 3]
        with col:
            if st.button(
                f"{emotion_data['emoji']} {emotion_data['korean']}", 
                use_container_width=True,
                key=f"emotion_{emotion_key}"
            ):
                # ÏàòÎèô ÏÑ†ÌÉù ÏãúÏóêÎèÑ ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï∂îÍ∞Ä
                current_time = datetime.now()
                st.session_state.emotion_history.append({
                    'emotion': emotion_key,
                    'score': 0.9,  # ÏàòÎèô ÏÑ†ÌÉùÏù¥ÎØÄÎ°ú ÎÜíÏùÄ Ïã†Î¢∞ÎèÑ
                    'timestamp': current_time,
                    'datetime': current_time.strftime('%Y-%m-%d %H:%M:%S'),
                    'raw_emotion': emotion_key
                })
                
                st.session_state.current_page = 'result'
                st.session_state.selected_emotion = emotion_key
                st.session_state.manual_score = 0.9
                st.rerun()

def show_analytics_page():
    """Í≥†Í∏â Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú ÌéòÏù¥ÏßÄ"""
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
    st.title("üìä Í∞êÏ†ï Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú")
    st.markdown("---")
    
    # Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
    if st.button("üîô Î©îÏù∏ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞"):
        st.session_state.current_page = 'main'
        st.rerun()
    
    # Î™®Îì† Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    all_history = load_all_emotion_data()
    
    if not all_history:
<<<<<<< HEAD
        st.warning("üî≠ Î∂ÑÏÑùÌï† Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
=======
        st.warning("üì≠ Î∂ÑÏÑùÌï† Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
        st.info("Î®ºÏ†Ä ÏõπÏ∫† ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ïã§ÌñâÌïòÍ±∞ÎÇò ÏàòÎèôÏúºÎ°ú Í∞êÏ†ïÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!")
        return
    
    st.success(f"‚úÖ Ï¥ù {len(all_history)}Í∞úÏùò Í∞êÏ†ï Í∏∞Î°ùÏù¥ Î°úÎìúÎêòÏóàÏäµÎãàÎã§.")
    
    # ÏÇ¨Ïù¥ÎìúÎ∞î ÏÑ§Ï†ï
    st.sidebar.header("üìà Î∂ÑÏÑù ÏÑ§Ï†ï")
    
    # ÏãúÍ∞Ñ Î≤îÏúÑ ÏÑ†ÌÉù
    time_options = {
        "ÏµúÍ∑º 10Î∂Ñ": 10,
        "ÏµúÍ∑º 30Î∂Ñ": 30,
        "ÏµúÍ∑º 1ÏãúÍ∞Ñ": 60,
        "ÏµúÍ∑º 2ÏãúÍ∞Ñ": 120,
        "ÏµúÍ∑º 6ÏãúÍ∞Ñ": 360,
        "ÏµúÍ∑º 12ÏãúÍ∞Ñ": 720,
        "ÏµúÍ∑º 24ÏãúÍ∞Ñ": 1440,
        "Ï†ÑÏ≤¥": 99999
    }
    
    selected_time = st.sidebar.selectbox(
        "Î∂ÑÏÑù ÏãúÍ∞Ñ Î≤îÏúÑ",
        list(time_options.keys()),
        index=1
    )
    
    minutes = time_options[selected_time]
    
    # Ïã§ÏãúÍ∞Ñ ÏÉàÎ°úÍ≥†Ïπ® ÏòµÏÖò
    auto_refresh = st.sidebar.checkbox("ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® (30Ï¥à)", value=False)
    if auto_refresh:
        time.sleep(30)
        st.rerun()
    
    # ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº
    if st.sidebar.button("üîÑ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®"):
        st.rerun()
<<<<<<< HEAD
    # Î©îÏù∏ ÎåÄÏãúÎ≥¥Îìú - ÏÑ∏Î°ú Î∞∞ÏπòÎ°ú Î≥ÄÍ≤Ω
    st.subheader(f"üìà Í∞êÏ†ï Î≥ÄÌôî Ï∂îÏù¥")
    timeline_chart = create_enhanced_timeline_chart(all_history, minutes)
    if timeline_chart:
        st.plotly_chart(timeline_chart, use_container_width=True)
    else:
        st.info("Ìï¥Îãπ ÏãúÍ∞Ñ Î≤îÏúÑÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")

    st.subheader(f"ü•ß Í∞êÏ†ï Î∂ÑÌè¨")
    distribution_chart = create_emotion_distribution_chart(all_history, minutes)
    if distribution_chart:
        st.plotly_chart(distribution_chart, use_container_width=True)
    else:
        st.info("Ìï¥Îãπ ÏãúÍ∞Ñ Î≤îÏúÑÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
=======
    
    # Î©îÏù∏ ÎåÄÏãúÎ≥¥Îìú
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader(f"üìà Í∞êÏ†ï Î≥ÄÌôî Ï∂îÏù¥")
        timeline_chart = create_enhanced_timeline_chart(all_history, minutes)
        if timeline_chart:
            st.plotly_chart(timeline_chart, use_container_width=True)
        else:
            st.info("Ìï¥Îãπ ÏãúÍ∞Ñ Î≤îÏúÑÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
    
    with col2:
        st.subheader(f"ü•ß Í∞êÏ†ï Î∂ÑÌè¨")
        distribution_chart = create_emotion_distribution_chart(all_history, minutes)
        if distribution_chart:
            st.plotly_chart(distribution_chart, use_container_width=True)
        else:
            st.info("Ìï¥Îãπ ÏãúÍ∞Ñ Î≤îÏúÑÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
    # ÌÜµÍ≥Ñ ÌÖåÏù¥Î∏î
    st.subheader(f"üìä Í∞êÏ†ï ÌÜµÍ≥Ñ")
    stats_table = create_emotion_stats_table(all_history, minutes)
    if stats_table is not None:
        st.dataframe(stats_table, use_container_width=True)
    else:
        st.info("Ìï¥Îãπ ÏãúÍ∞Ñ Î≤îÏúÑÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
<<<<<<< HEAD
    
=======
        
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760
    # ÏõêÏãú Îç∞Ïù¥ÌÑ∞ ÌëúÏãú (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    show_raw_data = st.checkbox("üìã ÏõêÏãú Îç∞Ïù¥ÌÑ∞ Î≥¥Í∏∞")
    if show_raw_data:
        cutoff_time = datetime.now() - timedelta(minutes=minutes)
        recent_data = [h for h in all_history if h['timestamp'] > cutoff_time]
        
        if recent_data:
            df_raw = pd.DataFrame([
                {
                    'ÏãúÍ∞Ñ': entry['timestamp'].strftime('%Y-%m-%d %H:%M:%S'),
                    'Í∞êÏ†ï': f"{EMOTIONS.get(entry['emotion'], {'emoji': 'ü§î'})['emoji']} {entry['emotion']}",
                    'Ïã†Î¢∞ÎèÑ': f"{entry['score']*100:.1f}%",
                    'ÏõêÎ≥∏ Í∞êÏ†ï': entry.get('raw_emotion', entry['emotion'])
                }
                for entry in reversed(recent_data)  # ÏµúÏã†ÏàúÏúºÎ°ú Ï†ïÎ†¨
            ])
            st.dataframe(df_raw, use_container_width=True)
        else:
            st.info("Ìï¥Îãπ ÏãúÍ∞Ñ Î≤îÏúÑÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")

<<<<<<< HEAD
    # --- ÌïòÎã® CTA: ÌéòÏù¥ÏßÄ Îß® ÏïÑÎûò, Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨ ---
    st.markdown("<div style='height:40px'></div>", unsafe_allow_html=True)  # ÏïΩÍ∞ÑÏùò Ïó¨Î∞±

    left, center, right = st.columns([1, 2, 1])  # Í∞ÄÏö¥Îç∞ Ïó¥Îßå ÎÑìÍ≤å
    with center:
        # ÎÜíÏù¥/Ìè∞Ìä∏Îäî Ïù¥ÎØ∏ Ï†ÑÏó≠ CSS(.stButton > button)Î°ú Ïû°ÌòÄÏûàÏúºÎãà Ïó¨Í∏∞ÏÑ† widthÎßå Ï±ÑÏõÄ
        if st.button("üå∏ ÌûêÎßÅÏÑºÌÑ∞ ÏûÖÏû•\n\nÎ∞îÎ°ú ÌûêÎßÅ Í≥µÍ∞ÑÏúºÎ°ú Ïù¥ÎèôÌï¥Ïöî",
                    key="healing_mode", use_container_width=True):
            st.success("ÌûêÎßÅÏÑºÌÑ∞Î°ú Ïù¥ÎèôÌï©ÎãàÎã§!")
            progress_bar = st.progress(0)
            for i in range(100):
                time.sleep(0.02)
                progress_bar.progress(i + 1)
            st.switch_page("pages\healing_center.py")


# === Î©îÏù∏ ÎùºÏö∞ÌÑ∞ ===    
def main():
        # ÌòÑÏû¨ ÌéòÏù¥ÏßÄ ÎùºÏö∞ÌåÖ
    if st.session_state.current_page == 'main':
        show_main_page()
    elif st.session_state.current_page == 'webcam':
        show_webcam_page()
    else:
        st.session_state.current_page = 'main'
        st.rerun()
=======
def show_result_page():
    """Í∞êÏ†ï Í≤∞Í≥º ÌéòÏù¥ÏßÄ (Ìñ•ÏÉÅÎêú Î≤ÑÏ†Ñ)"""
    import random
    
    # URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú Í∞êÏ†ï Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    emotion_param = safe_get_query_param('emotion', None)
    score_param = safe_get_query_param('score', None)
    
    # URLÏóêÏÑú ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ Î∞è ÏÑ∏ÏÖò ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    url_history = load_url_history_data()
    if url_history:
        # Ï§ëÎ≥µ Ï†úÍ±∞ÌïòÎ©¥ÏÑú ÏÑ∏ÏÖòÏóê Ï∂îÍ∞Ä
        existing_times = {h['timestamp'].strftime('%Y-%m-%d %H:%M:%S') 
                         for h in st.session_state.emotion_history}
        
        new_entries = []
        for entry in url_history:
            time_key = entry['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
            if time_key not in existing_times:
                new_entries.append(entry)
        
        if new_entries:
            st.session_state.emotion_history.extend(new_entries)
            st.info(f"üìä ÏõπÏ∫†ÏóêÏÑú {len(new_entries)}Í∞úÏùò ÏÉàÎ°úÏö¥ Í∏∞Î°ùÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!")
    
    # Í∞êÏ†ï Ï†ïÎ≥¥ Í≤∞Ï†ï Ïö∞ÏÑ†ÏàúÏúÑ: URL > ÏÑ∏ÏÖò > Í∏∞Î≥∏Í∞í
    if emotion_param:
        emotion_key = emotion_param
        st.session_state.selected_emotion = emotion_param
    else:
        emotion_key = st.session_state.get('selected_emotion', 'neutral')
    
    # Ï†êÏàò Ï†ïÎ≥¥ Í≤∞Ï†ï
    if score_param:
        try:
            score = float(score_param)
        except:
            score = st.session_state.get('manual_score', 0.8)
    else:
        score = st.session_state.get('manual_score', 0.8)
    
    emotion = EMOTIONS.get(emotion_key, EMOTIONS['neutral'])
    
    # ÌòÑÏû¨ Í∞êÏ†ïÏùÑ ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï∂îÍ∞Ä (Ï§ëÎ≥µ Î∞©ÏßÄ)
    current_time = datetime.now()
    should_add = True
    
    if st.session_state.emotion_history:
        last_entry = st.session_state.emotion_history[-1]
        time_diff = (current_time - last_entry['timestamp']).total_seconds()
        if last_entry['emotion'] == emotion_key and time_diff < 10:
            should_add = False
    
    if should_add and emotion_param:  # URLÏóêÏÑú Ïò® Í≤ΩÏö∞Îßå ÏûêÎèô Ï∂îÍ∞Ä
        st.session_state.emotion_history.append({
            'emotion': emotion_key,
            'score': score,
            'timestamp': current_time,
            'datetime': current_time.strftime('%Y-%m-%d %H:%M:%S'),
            'raw_emotion': emotion_key
        })
        
        # ÌûàÏä§ÌÜ†Î¶¨ Í∏∏Ïù¥ Ï†úÌïú
        if len(st.session_state.emotion_history) > 100:
            st.session_state.emotion_history = st.session_state.emotion_history[-100:]
    
    # Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
    if st.button("üîô Î©îÏù∏ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞"):
        st.session_state.current_page = 'main'
        if 'selected_emotion' in st.session_state:
            del st.session_state.selected_emotion
        if 'manual_score' in st.session_state:
            del st.session_state.manual_score
        st.query_params.clear()
        st.rerun()
    
    # Î©îÏù∏ Ìó§Îçî
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown(f"""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, {emotion['color']}20 0%, {emotion['color']}40 100%); border-radius: 15px; margin-bottom: 2rem;">
            <div style="font-size: 5rem; margin: 0;">{emotion['emoji']}</div>
            <h2 style="color: {emotion['color']}; margin: 1rem 0; font-size: 2.5rem;">
                {emotion['korean']}
            </h2>
            <h3 style="color: {emotion['color']}; margin: 0.5rem 0; font-size: 1.5rem; text-transform: uppercase;">
                {emotion_key}
            </h3>
            <p style="font-size: 1.3rem; color: #666; margin: 1rem 0; line-height: 1.6;">
                {emotion['description']}
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Ïã†Î¢∞ÎèÑ Í≤åÏù¥ÏßÄ
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        gauge_chart = create_emotion_gauge(score, emotion['color'])
        st.plotly_chart(gauge_chart, use_container_width=True)
    
    # Ïã§ÏãúÍ∞Ñ ÎØ∏Îãà Ï∞®Ìä∏ (ÌûàÏä§ÌÜ†Î¶¨Í∞Ä Ï∂©Î∂ÑÌï† Îïå)
    if len(st.session_state.emotion_history) > 1:
        st.subheader("üìà Ïã§ÏãúÍ∞Ñ Í∞êÏ†ï Î≥ÄÌôî")
        mini_timeline = create_enhanced_timeline_chart(st.session_state.emotion_history, 10)
        if mini_timeline:
            st.plotly_chart(mini_timeline, use_container_width=True)
    
    # ÏÜîÎ£®ÏÖò Î∞è Ï°∞Ïñ∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üí° Ï∂îÏ≤ú ÏÜîÎ£®ÏÖò")
        for solution in emotion['solutions']:
            st.markdown(f"‚Ä¢ {solution}")
        
        st.subheader("üí≠ Î™ÖÏñ∏")
        selected_quotes = random.sample(emotion['quotes'], min(2, len(emotion['quotes'])))
        for quote in selected_quotes:
            st.markdown(f"> {quote}")
    
    with col2:
        st.subheader("üéØ Ï°∞Ïñ∏")
        st.info(emotion['tips'])
        
        # Í¥ÄÎ†® Í∞êÏ†ïÎì§ ÌëúÏãú
        if len(st.session_state.emotion_history) > 0:
            recent_emotions = list(set([h['emotion'] for h in st.session_state.emotion_history[-10:]]))
            if len(recent_emotions) > 1:
                st.subheader("üîÑ ÏµúÍ∑º Í∞êÏ†ïÎì§")
                emotion_cols = st.columns(min(len(recent_emotions), 4))
                for i, emo in enumerate(recent_emotions[:4]):  # ÏµúÎåÄ 4Í∞úÍπåÏßÄÎßå
                    with emotion_cols[i]:
                        emo_data = EMOTIONS.get(emo, {'emoji': 'ü§î', 'korean': emo})
                        st.markdown(f"<div style='text-align: center; padding: 0.5rem; background: {emo_data.get('color', '#808080')}20; border-radius: 8px;'>{emo_data['emoji']}<br><small>{emo_data['korean']}</small></div>", unsafe_allow_html=True)
    
    # Ïï°ÏÖò Î≤ÑÌäºÎì§
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä ÏÉÅÏÑ∏ Î∂ÑÏÑù Î≥¥Í∏∞", use_container_width=True, type="secondary"):
            st.session_state.current_page = 'analytics'
            st.rerun()
    
    with col2:
        if st.button("üîÑ Îã§Ïãú Î∂ÑÏÑùÌïòÍ∏∞", use_container_width=True, type="primary"):
            st.session_state.current_page = 'main'
            if 'selected_emotion' in st.session_state:
                del st.session_state.selected_emotion
            if 'manual_score' in st.session_state:
                del st.session_state.manual_score
            st.query_params.clear()
            st.rerun()
    
    with col3:
        if st.button("üìä Îã§Î•∏ Í∞êÏ†ï Î≥¥Í∏∞", use_container_width=True):
            st.session_state.current_page = 'manual'
            st.rerun()

# === Î©îÏù∏ ÎùºÏö∞ÌÑ∞ ===

def main():
    """Î©îÏù∏ ÎùºÏö∞ÌÑ∞ - ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏóê Îî∞Îùº Ï†ÅÏ†àÌïú Ìï®Ïàò Ìò∏Ï∂ú"""
    
    # ÏÇ¨Ïù¥ÎìúÎ∞îÏóê ÌòÑÏû¨ ÏÉÅÌÉú ÌëúÏãú
    with st.sidebar:
        st.header("üîß ÏÉÅÌÉú Ï†ïÎ≥¥")
        st.write(f"**ÌòÑÏû¨ ÌéòÏù¥ÏßÄ**: `{st.session_state.current_page}`")
        
        if 'selected_emotion' in st.session_state:
            emotion = EMOTIONS[st.session_state.selected_emotion]
            st.write(f"**ÏÑ†ÌÉùÎêú Í∞êÏ†ï**: {emotion['emoji']} {emotion['korean']}")
        
        # ÏõπÏ∫† ÏÉÅÌÉú ÌëúÏãú
        webcam_status = "üü¢ Ïã§ÌñâÏ§ë" if is_webcam_running() else "üî¥ Ï§ëÏßÄÎê®"
        st.write(f"**ÏõπÏ∫† ÏÉÅÌÉú**: {webcam_status}")
        
        # ÌûàÏä§ÌÜ†Î¶¨ ÏÉÅÌÉú
        history_count = len(st.session_state.emotion_history)
        st.write(f"**ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨**: {history_count}Í∞ú")
        
        # Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú
        local_count = len(load_local_emotion_history())
        st.write(f"**Î°úÏª¨ Îç∞Ïù¥ÌÑ∞**: {local_count}Í∞ú")
        
        # URL Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú
        url_count = len(load_url_history_data())
        if url_count > 0:
            st.write(f"**URL Îç∞Ïù¥ÌÑ∞**: {url_count}Í∞ú")
        
        st.markdown("---")
        
        # ÏõπÏ∫† Í∞ïÏ†ú Ï¢ÖÎ£å Î≤ÑÌäº
        if st.button("üõë ÏõπÏ∫† Í∞ïÏ†ú Ï¢ÖÎ£å", type="secondary"):
            if stop_webcam_process():
                st.success("‚úÖ ÏõπÏ∫†Ïù¥ Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.")
                # ÏõπÏ∫† Ï¢ÖÎ£å Ïãú ÏûêÎèôÏúºÎ°ú ÎåÄÏãúÎ≥¥ÎìúÎ°ú Ïù¥Îèô
                st.session_state.current_page = 'analytics'
                st.rerun()
        
        st.markdown("---")

        # ÎåÄÏãúÎ≥¥Îìú Î∞îÎ°úÍ∞ÄÍ∏∞ Î≤ÑÌäº Ï∂îÍ∞Ä
        if st.button("üìä Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú", use_container_width=True, type="primary"):
            st.session_state.current_page = 'analytics'
            st.rerun()

        st.markdown("---")

        # ÌûàÏä§ÌÜ†Î¶¨ Ï¥àÍ∏∞Ìôî Î≤ÑÌäº
        if st.session_state.emotion_history:
            if st.button("üóëÔ∏è ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨ Ï¥àÍ∏∞Ìôî"):
                st.session_state.emotion_history = []
                st.success("‚úÖ ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.")
                st.rerun()
        
        st.markdown("---")
    
    # ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏóê Îî∞Îùº Ï†ÅÏ†àÌïú Ìï®Ïàò Ìò∏Ï∂ú
    if st.session_state.current_page == 'main':
        show_main_page()
    elif st.session_state.current_page == 'manual':
        show_manual_page()
    elif st.session_state.current_page == 'analytics':
        show_analytics_page()
    elif st.session_state.current_page == 'result':
        show_result_page()
    else:
        # ÏòàÏÉÅÏπò Î™ªÌïú ÌéòÏù¥ÏßÄÎ©¥ Î©îÏù∏ÏúºÎ°ú
        st.session_state.current_page = 'main'
        st.rerun()
    
    # Ìë∏ÌÑ∞

    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.caption("üé≠ Made with Streamlit | Í∞êÏ†ï Î∂ÑÏÑù ÏãúÏä§ÌÖú üöÄ")
        # ÌîÑÎ°úÍ∑∏Îû® Ï¢ÖÎ£å Î≤ÑÌäº
        st.subheader("‚ö†Ô∏è ÏãúÏä§ÌÖú Ï†úÏñ¥")
        if st.button("üõë ÌîÑÎ°úÍ∑∏Îû® ÏôÑÏ†Ñ Ï¢ÖÎ£å", use_container_width=True, type="secondary"):
            st.session_state.confirm_shutdown = True
            st.rerun()

        # ÌôïÏù∏ ÎåÄÌôîÏÉÅÏûê (Ïó¨Í∏∞ÏÑúÎäî Î≤ÑÌäºÎßå, Ìï®Ïàò Ìò∏Ï∂úÏùÄ ÌïòÏßÄ ÏïäÏùå)
        if st.session_state.get('confirm_shutdown', False):
            st.warning("‚ö†Ô∏è ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï¢ÖÎ£åÌïòÏãúÍ≤†ÏäµÎãàÍπå?")
            c1, c2 = st.columns(2)
            with c1:
                if st.button("‚úÖ Ïòà, Ï¢ÖÎ£å", key="confirm_yes"):
                    st.session_state.do_shutdown = True  # ‚Üê ÌîåÎûòÍ∑∏Îßå ÏÑ∏ÏõÄ
                    st.rerun()
            with c2:
                if st.button("‚ùå ÏïÑÎãàÏò§", key="confirm_no"):
                    st.session_state.confirm_shutdown = False
                    st.rerun()

        # =========================
        # üëá Î∞òÎìúÏãú Ïª¨Îüº Î∏îÎ°ù 'Î∞ñ'Ïóê Îë¨Ïïº Ìï® (main() Îß® ÏïÑÎûòÏ™ΩÏù¥Î©¥ OK)
        # Ïã§Ï†ú Ï¢ÖÎ£å Î°úÏßÅÏùÄ Ï†ÑÏó≠ Î†àÏù¥ÏïÑÏõÉÏóêÏÑú Ìò∏Ï∂ú ‚Üí Î©îÏãúÏßÄ Î∞ïÏä§Í∞Ä Ï†ÑÏ≤¥ Ìè≠
        # =========================
        if st.session_state.get('do_shutdown'):
            # ÌîåÎûòÍ∑∏ Ï†ïÎ¶¨(ÏÑ†ÌÉù)
            st.session_state.do_shutdown = False
            st.session_state.confirm_shutdown = False
            shutdown_app()  # ‚Üê Ïó¨Í∏∞ÏÑú Ïã§ÌñâÎêòÎ©¥ success()/info()Í∞Ä Ï†ÑÏ≤¥ ÎÑàÎπÑÎ°ú Î†åÎçîÎßÅÎê®
>>>>>>> f81054bf3e5cea299f28fc141e2bd08a1635d760


# Ïï± Ïã§Ìñâ
if __name__ == "__main__":
    main()